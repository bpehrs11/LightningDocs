/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "MailNewsTypes2.idl"
#include "nsIImapUrl.idl"

interface nsIMsgMailNewsUrl;

[scriptable, uuid(6ffb6a92-e43a-405f-92ea-92cf81a5e17b)]

interface nsIImapMessageSink : nsISupports {
  // set up messge download output stream
  void setupMsgWriteStream(in nsIFile aFile, in boolean aAppendDummyEnvelope);

  /**
   * Used by the imap protocol code to notify the core backend code about
   * downloaded imap messages.
   *
   * @param aAdoptedMsgLine  a string with a lot of message lines,
   *                         separated by native line terminators.
   * @param aUidOfMsg        IMAP UID of the fetched message.
   * @param aSizeOfMsg       RFC822.Size of the fetched message
   * @param aImapUrl         IMAP Url used to fetch the message.
   */
  void parseAdoptedMsgLine(in string aAdoptedMsgLine, in nsMsgKey aUidOfMsg,
                           in long aSizeOfMsg, in nsIImapUrl aImapUrl);

  void normalEndMsgWriteStream(in nsMsgKey aUidOfMessage,
                               in boolean aMarkMsgRead, in nsIImapUrl aImapUrl);

  void abortMsgWriteStream();

  void beginMessageUpload();

  /**
   *  Notify the message sink that one or more flags have changed
   *  For Condstore servers, also update the highestMod Sequence
   *  @param   aFlags         - The new flags for the message
   *  @param   aKeywords        keywords for the message
   *  @param   aMessageKey    - The UID of the message that changed
   *  @param   aHighestModSeq - The highest mod seq the parser has seen
   *                            for this folder
  **/
  void notifyMessageFlags(in unsigned long aFlags, in ACString aKeywords,
                          in nsMsgKey aMessageKey,
                          in unsigned long long aHighestModSeq);

  void notifyMessageDeleted(in string aOnlineFolderName,in boolean aDeleteAllMsgs,in string aMsgIdString);

  void getMessageSizeFromDB(in string aId, out unsigned long aSize);

  void setContentModified(in nsIImapUrl aImapUrl, in nsImapContentModifiedType aModified);
  void setImageCacheSessionForUrl(in nsIMsgMailNewsUrl aMailUrl);
  
  /**
   * For a message stored in a file, get the message metadata needed to copy
   * that message to an imap folder
   *
   * @param aRunningUrl  message URL
   * @param aDate        message date
   * @param aKeywords    message custom keywords (if supported by the server),
   *                     including messages tags and junk status
   *
   * @return             message flags
   */
  unsigned long getCurMoveCopyMessageInfo(in nsIImapUrl aRunningUrl, 
                                          out PRTime aDate, out ACString aKeywords);
};
