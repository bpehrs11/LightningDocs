/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsrootidl.idl"
#include "nsIMimeHeaders.idl"
#include "nsIMsgIdentity.idl"
#include "nsIMsgHdr.idl"

interface nsIURI;

typedef long nsMimeOutputType;

[scriptable, uuid(fdc2956e-d558-43fb-bfdd-fb9511229aa5)]
interface nsMimeOutput
{
  const long nsMimeMessageSplitDisplay = 0;
  const long nsMimeMessageHeaderDisplay = 1;
  const long nsMimeMessageBodyDisplay = 2;
  const long nsMimeMessageQuoting = 3;
  const long nsMimeMessageBodyQuoting = 4;
  const long nsMimeMessageRaw = 5;
  const long nsMimeMessageDraftOrTemplate = 6;
  const long nsMimeMessageEditorTemplate = 7;
  const long nsMimeMessagePrintOutput = 9;
  const long nsMimeMessageSaveAs = 10;
  const long nsMimeMessageSource = 11;
  const long nsMimeMessageFilterSniffer = 12;
  const long nsMimeMessageDecrypt = 13;
  const long nsMimeMessageAttach = 14;
  const long nsMimeUnknown = 15;
};

[scriptable, uuid(FA81CAA0-6261-11d3-8311-00805F2A0107)]
interface nsIMimeStreamConverterListener : nsISupports{
      void onHeadersReady(in nsIMimeHeaders headers);
};

/**
 * This interface contains mailnews mime specific information for stream
 * converters. Most of the code is just stuff that has been moved out
 * of nsIStreamConverter.idl to make it more generic.
 */
[scriptable, uuid(d894c833-29c5-495b-880c-9a9f847bfdc9)]
interface nsIMimeStreamConverter : nsISupports {

  /**
   * Set the desired mime output type on the converer.
   */
  void SetMimeOutputType(in nsMimeOutputType aType);

  void GetMimeOutputType(out nsMimeOutputType aOutFormat);

  /**
   * This is needed by libmime for MHTML link processing...the url is the URL
   * string associated with this input stream.
   */
  void SetStreamURI(in nsIURI aURI);

  /**
   * Used to extract headers while parsing a message.
   */
  void SetMimeHeadersListener(in nsIMimeStreamConverterListener listener, in nsMimeOutputType aType);

  /**
   * This is used for forward inline, both as a filter action, and from the UI.
   */
  attribute boolean forwardInline;

  /**
   * This is used for a forward inline filter action. When streaming is done,
   * we won't open a compose window with the editor contents.
   */
  attribute boolean forwardInlineFilter;

  /**
   * Address for the forward inline filter to forward the message to.
   */
  attribute AString forwardToAddress;
  /**
   * Use the opposite compose format, used for forward inline.
   */
  attribute boolean overrideComposeFormat;

  /**
   * This is used for OpenDraft, OpenEditorTemplate and Forward inline (which use OpenDraft)
   */
  attribute nsIMsgIdentity identity;
  attribute string originalMsgURI;
  attribute nsIMsgDBHdr origMsgHdr;
};
