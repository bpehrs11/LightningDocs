/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * the Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Andrew Sutherland <asutherland@asutherland.org>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
#include "nsISupports.idl"

/**
 * Simple stopwatch mechanism for determining the amount of wall-clock time and
 * CPU time (user + system) that has elapsed.  It is not fancy.  It is either
 * running or it is not.  If you want coherent cpu and real time values, then
 * you had better stop it first.  It does not keep counting when stopped,
 * although one could add a resumeRetroactive or something to accomplish that.
 */
[scriptable, uuid(7a671d6e-d48f-4a4f-b87e-644815a5e381)]
interface nsIStopwatch : nsISupports {
  /**
   * Start the stopwatch; all counters are reset to zero.  If you want to
   * keep the already accumulated values, use resume instead.
   */
  void start();

  /**
   * Stop the stopwatch.
   */
  void stop();

  /**
   * Resume the stopwatch without clearing the existing counters.  Any time
   * already accumulated on cpuTime/realTime will be kept.
   */
  void resume();

  /**
   * The total CPU time (user + system) in seconds accumulated between calls to
   * start/resume and stop.  You have to stop the stopwatch to cause this value
   * to update.
   */
  readonly attribute double cpuTimeSeconds;
  /**
   * The total wall clock time in seconds accumulated between calls to
   * start/resume and stop.  You have to stop the stopwatch to cause this value
   * to update.
   */
  readonly attribute double realTimeSeconds;
};
