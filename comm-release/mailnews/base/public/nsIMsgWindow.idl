/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIMsgStatusFeedback;
interface nsIMsgFolder;
interface nsITransactionManager;
interface nsIDocShell;
interface nsIDOMWindow;
interface nsIMsgHeaderSink;
interface nsIPrompt;
interface nsIInterfaceRequestor;

[scriptable, uuid(7B8F4A65-CFC4-4b3f-BF5C-152AA8D5CD10)]
interface nsIMsgWindowCommands : nsISupports {
  void selectFolder(in ACString folderUri);
  void selectMessage(in ACString messageUri);
  void clearMsgPane();
};

[scriptable, uuid(8ad06f07-2230-4917-968c-2269588dbf7d)]
interface nsIMsgWindow : nsISupports {
  attribute nsIMsgStatusFeedback statusFeedback;
  attribute nsIMsgWindowCommands windowCommands;
  attribute nsIMsgHeaderSink msgHeaderSink;
  attribute nsITransactionManager transactionManager;
  attribute nsIMsgFolder openFolder;
  
  /**
   * @note Setting this attribute has various side effects, including
   * wiring up this object as the parent nsIURIContentListener for the
   * passed-in docshell as well as setting the message content policy service
   * to listen for OnLocationChange notifications.
   */
  attribute nsIDocShell rootDocShell;

  /**
   * @note Small helper function used to optimize our use of a weak reference
   * on the message window docshell. Under no circumstances should you be
   * holding on to the docshell returned here outside the scope of your routine.
   */
  readonly attribute nsIDocShell messageWindowDocShell;
  
  /**
   * These are currently used to set notification callbacks on
   * protocol channels to handle things like bad cert exceptions.
   */
  attribute nsIInterfaceRequestor notificationCallbacks;
  
  void displayHTMLInMessagePane(in AString title, in AString body, in boolean clearMsgHdr);

  readonly attribute nsIPrompt promptDialog;
  attribute ACString mailCharacterSet;

  /**
    Remember the message's charaset was overridden, so it can be inherited (e.g for quoting).
   */
  attribute boolean charsetOverride;

  /**
    Has a running url been stopped? If you care about checking
    this flag, you need to clear it before you start your operation since
    there's no convenient place to clear it.
  */
  attribute boolean stopped;

  attribute nsIDOMWindow domWindow;

  void StopUrls();

  /**
    when the msg window is being unloaded from the content window,
    we can use this notification to force a flush on anything the
    msg window hangs on too. For some reason xpconnect is still hanging
    onto the msg window even though all of our objects have let go of it
    this forces a release...
   */
  void closeWindow();
};
