/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIAtom.idl"

interface nsIMsgFolder;
interface nsIMsgDBHdr;

typedef unsigned long folderListenerNotifyFlagValue;

[scriptable, uuid(f60ee1a2-6d81-422c-958f-d408b1b2daa6)]
interface nsIFolderListener : nsISupports {
  const folderListenerNotifyFlagValue added = 0x1;
  void OnItemAdded(in nsIMsgFolder aParentItem,
                   in nsISupports aItem);
  
  const folderListenerNotifyFlagValue removed = 0x2;
  void OnItemRemoved(in nsIMsgFolder aParentItem,
                     in nsISupports aItem);
  
  const folderListenerNotifyFlagValue propertyChanged = 0x4;
  void OnItemPropertyChanged(in nsIMsgFolder aItem,
                             in nsIAtom aProperty,
                             in string aOldValue,
                             in string aNewValue);
  
  const folderListenerNotifyFlagValue intPropertyChanged = 0x8;
  void OnItemIntPropertyChanged(in nsIMsgFolder aItem,
                                in nsIAtom aProperty,
                                in long aOldValue,
                                in long aNewValue);
  
  const folderListenerNotifyFlagValue boolPropertyChanged = 0x10;
  void OnItemBoolPropertyChanged(in nsIMsgFolder aItem,
                                 in nsIAtom aProperty,
                                 in boolean aOldValue,
                                 in boolean aNewValue);
  
  const folderListenerNotifyFlagValue unicharPropertyChanged = 0x20;
  void OnItemUnicharPropertyChanged(in nsIMsgFolder aItem,
                                    in nsIAtom aProperty,
                                    in wstring aOldValue,
                                    in wstring aNewValue);
  
  const folderListenerNotifyFlagValue propertyFlagChanged = 0x40;
  void OnItemPropertyFlagChanged(in nsIMsgDBHdr aItem,
                                 in nsIAtom aProperty,
                                 in unsigned long aOldFlag,
                                 in unsigned long aNewFlag);

  const folderListenerNotifyFlagValue event = 0x80;
  void OnItemEvent(in nsIMsgFolder aItem, in nsIAtom aEvent);
  
  const folderListenerNotifyFlagValue all = 0xFFFFFFFF; 

  //  void OnFolderLoaded(in nsIMsgFolder aFolder);
  //  void OnDeleteOrMoveMessagesCompleted(in nsIMsgFolder aFolder);
};
