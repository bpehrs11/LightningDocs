/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Mark Banner <bugzilla@standard8.plus.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIStreamListener.idl"

interface nsIMsgStatusFeedback;
interface nsIMsgIdentity;
interface nsIMsgSendLaterListener;
interface nsIMsgFolder;

/**
 * nsIMsgSendLater is a service used for sending messages in the background.
 * Messages should be saved to an identity's unsent messages folder, and then
 * can be sent by calling sendUnsentMessages.
 *
 * Although the service supports passing identities as parameters, until bug
 * 317803 is fixed, all identities use the same folder, and hence the option
 * currently doesn't work.
 */
[scriptable, uuid(fa324a4b-4b87-4e9a-a3c0-af9071a358df)]
interface nsIMsgSendLater : nsIStreamListener 
{
  /// Used to obtain status feedback for when messages are sent.
  attribute nsIMsgStatusFeedback statusFeedback;

  /**
   * Sends any unsent messages in the identity's unsent messages folder.
   *
   * @param aIdentity   The identity to send messages for.
   */
  void sendUnsentMessages(in nsIMsgIdentity aIdentity);

  /**
   * Adds an listener to the service to receive notifications.
   *
   * @param aListener   The listener to add.
   */
  void addListener(in nsIMsgSendLaterListener aListener);

  /**
   * Removes a listener from the service.
   *
   * @param aListener                 The listener to remove.
   * @exception NS_ERROR_INVALID_ARG  If the listener was not already added to
   *                                  the service.
   */
  void removeListener(in nsIMsgSendLaterListener aListener);

  /**
   * Returns the unsent messages folder for the identity.
   */
  nsIMsgFolder getUnsentMessagesFolder(in nsIMsgIdentity userIdentity);

  /**
   * Returns true if there are any unsent messages to send.
   *
   * @param aIdentity  The identity whose folder to check for unsent messages.
   *                   If not specified, all unsent message folders are checked.
   */
  boolean hasUnsentMessages([optional] in nsIMsgIdentity aIdentity);

  /// Returns true if the service is currently sending messages.
  readonly attribute boolean sendingMessages;
};
