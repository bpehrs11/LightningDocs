/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Instantbird messenging client, released
 * 2010.
 *
 * The Initial Developer of the Original Code is
 * Florian QUEZE <florian@instantbird.org>.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsISimpleEnumerator.idl"
#include "prplIConversation.idl"

[scriptable, uuid(f13dc4fc-5334-45cb-aa58-a92851955e55)]
interface imIStatusInfo: nsISupports {
  // Name suitable for display in the UI. Can either be the username,
  // the server side alias, or the user set local alias of the contact.
  readonly attribute AUTF8String displayName;
  readonly attribute AUTF8String buddyIconFilename;

  const short STATUS_UNKNOWN = 0;
  const short STATUS_OFFLINE = 1;
  const short STATUS_INVISIBLE = 2;
  const short STATUS_MOBILE = 3;
  const short STATUS_IDLE = 4;
  const short STATUS_AWAY = 5;
  const short STATUS_UNAVAILABLE = 6;
  const short STATUS_AVAILABLE = 7;

  // numerical value used to compare the availability of two buddies
  // based on their current status.
  //  Use it only for immediate comparisons, do not store the value,
  //  it can change between versions for a same status of the buddy.
  readonly attribute long statusType;

  readonly attribute boolean online;    // (statusType > STATUS_OFFLINE)
  readonly attribute boolean available; // (statusType == STATUS_AVAILABLE)
  readonly attribute boolean idle;      // (statusType == STATUS_IDLE)
  readonly attribute boolean mobile;    // (statusType == STATUS_MOBILE)

  readonly attribute AUTF8String statusText;

  // Gives more detail to compare the availability of two buddies with the same
  // status type.
  //  Example: 2 buddies may have been idle for various amounts of times.
  readonly attribute long availabilityDetails;

  // True if the buddy is online or if the account supports sending
  // offline messages to the buddy.
  readonly attribute boolean canSendMessage;

  // enumerator of purpleTooltipInfo components
  nsISimpleEnumerator getTooltipInfo();

  // Will select the buddy automatically based on availability, and
  // the account (if needed) based on the account order in the account
  // manager.
  prplIConversation createConversation();
};
