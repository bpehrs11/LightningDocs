/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Instantbird messenging client, released
 * 2010.
 *
 * The Initial Developer of the Original Code is
 * Florian QUEZE <florian@instantbird.org>.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIObserver.idl"

interface imIContact;

[scriptable, uuid(c211e5e2-f0a4-4a86-9e4c-3f6b905628a5)]
interface imITag: nsISupports {
  readonly attribute long id;
           attribute AUTF8String name;

  // Get an array of all the contacts associated with this tag.
  //  Contacts can either "have the tag" (added by user action) or
  //  have inherited the tag because it was the server side group for
  //  one of the AccountBuddy of the contact.
  void getContacts([optional] out unsigned long contactCount,
                   [retval, array, size_is(contactCount)] out imIContact contacts);

  void addObserver(in nsIObserver aObserver);
  void removeObserver(in nsIObserver aObserver);
  /* Observers will be notified of changes related to the contacts
   * that have the tag: contact-*, buddy-*, account-buddy-*
   * notifications forwarded respectively from the imIContact,
   * imIBuddy and imIAccountBuddy instances.
   */

  // Exposed for add-on authors. All internal calls will come from the
  // imITag implementation itself so it wasn't required to expose this.
  // This can be used to dispatch custom notifications to the
  // observers of the tag.
  void notifyObservers(in nsISupports aObj, in string aEvent,
                       [optional] in wstring aData);
};

[scriptable, uuid(f799a9c2-23f2-4fd1-96fb-515bad238f8c)]
interface imITagsService: nsISupports {
  // Create a new tags or return the existing one if it already exists
  imITag createTag(in AUTF8String aName);
  // Get an existing tag by (numeric) id. Returns null if not found.
  imITag getTagById(in long aId);
  // Get an existing tag by name (will do an SQL query). Returns null
  // if not found.
  imITag getTagByName(in AUTF8String aName);
  // Get an array of all existing tags.
  void getTags([optional] out unsigned long tagCount,
               [retval, array, size_is(tagCount)] out imITag tags);

  boolean isTagHidden(in imITag aTag);
  void hideTag(in imITag aTag);
  void showTag(in imITag aTag);

  readonly attribute imITag otherContactsTag;
};
