/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Instantbird messenging client, released
 * 2010.
 *
 * The Initial Developer of the Original Code is
 * Florian QUEZE <florian@instantbird.org>.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsISimpleEnumerator.idl"
#include "nsIFile.idl"

interface imIAccount;
interface imIAccountBuddy;
interface imIBuddy;
interface imIContact;
interface prplIConversation;
interface prplIMessage;

[scriptable, uuid(5bc06f3b-33a1-412b-a4d8-4fc7ba4c962b)]
interface imILogConversation: nsISupports {
  readonly attribute AUTF8String title;
  readonly attribute AUTF8String name;

  // Simplified account implementation:
  //  - alias will always be empty
  //  - name (always the normalizedName)
  //  - statusInfo will return Services.core.globalUserStatus
  //  - protocol will only contain a "name" attribute, with the prpl's normalized name.
  // Other methods/attributes aren't implemented.
  readonly attribute imIAccount account;

  readonly attribute boolean isChat; // always false (compatibility with prplIConversation).
  readonly attribute imIAccountBuddy buddy; // always null (compatibility with prplIConvIM).

  void getMessages([optional] out unsigned long messageCount,
                   [retval, array, size_is(messageCount)] out prplIMessage messages);
};

[scriptable, uuid(164ff6c3-ca64-4880-b8f3-67eb1817955f)]
interface imILog: nsISupports {
  readonly attribute AUTF8String path;
  readonly attribute PRTime time;
  readonly attribute AUTF8String format;
  // Will return null if the log format isn't json.
  imILogConversation getConversation();
};

[scriptable, uuid(ab38c01c-2245-4279-9437-1d6bcc69d556)]
interface imILogger: nsISupports {
  imILog getLogFromFile(in nsIFile aFile);
  nsISimpleEnumerator getLogsForAccountBuddy(in imIAccountBuddy aAccountBuddy);
  nsISimpleEnumerator getLogsForBuddy(in imIBuddy aBuddy);
  nsISimpleEnumerator getLogsForContact(in imIContact aContact);
  nsISimpleEnumerator getLogsForConversation(in prplIConversation aConversation);
  nsISimpleEnumerator getSystemLogsForAccount(in imIAccount aAccount);
  nsISimpleEnumerator getSimilarLogs(in imILog aLog);
};
