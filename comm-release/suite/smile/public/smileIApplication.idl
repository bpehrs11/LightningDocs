/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is FUEL.
 *
 * The Initial Developer of the Original Code is
 *   the Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Mark Finkle <mfinkle@mozilla.com> (Original Author)
 *  John Resig  <jresig@mozilla.com> (Original Author)
 *  Jorge Villalobos <jorge.villalobos@gmail.com> (SeaMonkey port)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "extIApplication.idl"

interface nsIVariant;
interface nsIURI;
interface nsIDOMHTMLDocument;

interface smileIBookmarkFolder;
interface smileIBrowserTab;

/**
 * Interface representing a collection of annotations associated
 * with a bookmark or bookmark folder.
 */
[scriptable, uuid(335c9292-91a1-4ca0-ad0b-07d5f63ed6cd)]
interface smileIAnnotations : nsISupports
{
  /**
   * Array of the annotation names associated with the owning item
   */
  readonly attribute nsIVariant names;

  /**
   * Determines if an annotation exists with the given name.
   * @param   aName
   *          The name of the annotation
   * @returns true if an annotation exists with the given name,
   *          false otherwise.
   */
  boolean has(in AString aName);

  /**
   * Gets the value of an annotation with the given name.
   * @param   aName
   *          The name of the annotation
   * @returns A variant containing the value of the annotation. Supports
   *          string, boolean and number.
   */
  nsIVariant get(in AString aName);

  /**
   * Sets the value of an annotation with the given name.
   * @param   aName
   *          The name of the annotation
   * @param   aValue
   *          The new value of the annotation. Supports string, boolean
   *          and number
   * @param   aExpiration
   *          The expiration policy for the annotation.
   *          See nsIAnnotationService.
   */
  void set(in AString aName, in nsIVariant aValue, in PRInt32 aExpiration);

  /**
   * Removes the named annotation from the owner item.
   * @param   aName
   *          The name of annotation.
   */
  void remove(in AString aName);
};


/**
 * Interface representing a bookmark item.
 */
[scriptable, uuid(a27f8945-9333-45d3-8ee1-24cbcb3366f9)]
interface smileIBookmark : nsISupports
{
  /**
   * The id of the bookmark.
   */
  readonly attribute long long id;

  /**
   * The title of the bookmark.
   */
  attribute AString title;

  /**
   * The uri of the bookmark.
   */
  attribute nsIURI uri;

  /**
   * The description of the bookmark.
   */
  attribute AString description;

  /**
   * The keyword associated with the bookmark.
   */
  attribute AString keyword;

  /**
   * The type of the bookmark.
   * values: "bookmark", "separator"
   */
  readonly attribute AString type;

  /**
   * The parent folder of the bookmark.
   */
  attribute smileIBookmarkFolder parent;

  /**
   * The annotations object for the bookmark.
   */
  readonly attribute smileIAnnotations annotations;

  /**
   * The events object for the bookmark.
   * supports: "remove", "change", "visit", "move"
   */
  readonly attribute extIEvents events;

  /**
   * Removes the item from the parent folder. Used to
   * delete a bookmark or separator
   */
  void remove();
};


/**
 * Interface representing a bookmark folder. Folders
 * can hold bookmarks, separators and other folders.
 */
[scriptable, uuid(03227226-d6eb-4654-9578-710c2222eb81)]
interface smileIBookmarkFolder : nsISupports
{
  /**
   * The id of the folder.
   */
  readonly attribute long long id;

  /**
   * The title of the folder.
   */
  attribute AString title;

  /**
   * The description of the folder.
   */
  attribute AString description;

  /**
   * The type of the folder.
   * values: "folder"
   */
  readonly attribute AString type;

  /**
   * The parent folder of the folder.
   */
  attribute smileIBookmarkFolder parent;

  /**
   * The annotations object for the folder.
   */
  readonly attribute smileIAnnotations annotations;

  /**
   * The events object for the folder.
   * supports: "add", "addchild", "remove", "removechild", "change", "move"
   */
  readonly attribute extIEvents events;

  /**
   * Array of all bookmarks, separators and folders contained
   * in this folder.
   */
  readonly attribute nsIVariant children;

  /**
   * Adds a new child bookmark to this folder.
   * @param   aTitle
   *          The title of bookmark.
   * @param   aURI
   *          The uri of bookmark.
   */
  smileIBookmark addBookmark(in AString aTitle, in nsIURI aURI);

  /**
   * Adds a new child separator to this folder.
   */
  smileIBookmark addSeparator();

  /**
   * Adds a new child folder to this folder.
   * @param   aTitle
   *          The title of folder.
   */
  smileIBookmarkFolder addFolder(in AString aTitle);

  /**
   * Removes the folder from the parent folder.
   */
  void remove();
};

/**
 * Interface representing a container for bookmark roots. Roots
 * are the top level parents for the various types of bookmarks in the system.
 */
[scriptable, uuid(1102eec4-f66b-4082-abad-c967ad7d5f76)]
interface smileIBookmarkRoots : nsISupports
{
  /**
   * The folder for the 'bookmarks menu' root.
   */
  readonly attribute smileIBookmarkFolder menu;

  /**
   * The folder for the 'personal toolbar' root.
   */
  readonly attribute smileIBookmarkFolder toolbar;

  /**
   * The folder for the 'tags' root.
   */
  readonly attribute smileIBookmarkFolder tags;

  /**
   * The folder for the 'unfiled bookmarks' root.
   */
  readonly attribute smileIBookmarkFolder unfiled;
};


/**
 * Interface representing a browser window.
 */
[scriptable, uuid(1c3002ec-5aaf-4232-ab7d-835a348133fd)]
interface smileIWindow : nsISupports
{
  /**
   * A collection of browser tabs within the browser window.
   */
  readonly attribute nsIVariant tabs;

  /**
   * The currently-active tab within the browser window.
   */
  readonly attribute smileIBrowserTab activeTab;

  /**
   * Open a new browser tab, pointing to the specified URI.
   * @param   aURI
   *          The uri to open the browser tab to
   */
  smileIBrowserTab open(in nsIURI aURI);

  /**
   * The events object for the browser window.
   * supports: "TabOpen", "TabClose", "TabMove", "TabSelect"
   */
  readonly attribute extIEvents events;
};

/**
 * Interface representing a browser tab.
 */
[scriptable, uuid(9b06c55e-5377-4c71-8bda-8e8750c5a02a)]
interface smileIBrowserTab : nsISupports
{
  /**
   * The current uri of this tab.
   */
  readonly attribute nsIURI uri;

  /**
   * The current index of this tab in the browser window.
   */
  readonly attribute PRInt32 index;

  /**
   * The browser window that is holding the tab.
   */
  readonly attribute smileIWindow window;

  /**
   * The content document of the browser tab.
   */
  readonly attribute nsIDOMHTMLDocument document;

  /**
   * The events object for the browser tab.
   * supports: "load"
   */
  readonly attribute extIEvents events;

  /**
   * Load a new URI into this browser tab.
   * @param   aURI
   *          The uri to load into the browser tab
   */
  void load(in nsIURI aURI);

  /**
   * Give focus to this browser tab, and bring it to the front.
   */
  void focus();

  /**
   * Close the browser tab. This may not actually close the tab
   * as script may abort the close operation.
   */
  void close();

  /**
   * Moves this browser tab before another browser tab within the window.
   * @param   aBefore
   *          The tab before which the target tab will be moved
   */
  void moveBefore(in smileIBrowserTab aBefore);

  /**
   * Move this browser tab to the last tab within the window.
   */
  void moveToEnd();
};

/**
 * Interface for managing and accessing the applications systems
 */
[scriptable, uuid(0b8e2ed6-70d9-45a0-a745-a2b874d6b5fd)]
interface smileIApplication : extIApplication
{
  /**
   * The root bookmarks object for the application.
   * Contains all the bookmark roots in the system.
   */
  readonly attribute smileIBookmarkRoots bookmarks;

  /**
   * An array of browser windows within the application.
   */
  readonly attribute nsIVariant windows;

  /**
   * The currently active browser window.
   */
  readonly attribute smileIWindow activeWindow;

  /**
   * Returns true if the application is running on a Mac OS X. This is intended
   * for situations where Mac does things differently, e.g. The application
   * doesn't support print preview on Mac because Mac provides a preview option
   * in the print dialog.
   */
  readonly attribute boolean platformIsMac;
};
