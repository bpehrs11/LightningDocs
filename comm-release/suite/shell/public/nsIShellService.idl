/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Shell Service.
 *
 * The Initial Developer of the Original Code is
 *   Scott MacGregor <mscott@mozilla.org>.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Frank Wein <mcsmurf@mcsmurf.de>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */


#include "nsISupports.idl"

interface nsIDOMElement;
interface nsILocalFile;

[scriptable, uuid(BEBB8B6A-8AF4-4CF2-85AC-022F7C6A87A9)]
interface nsIShellService : nsISupports
{
  /**
   * app types we can be registered to handle
   */
  const unsigned short BROWSER = 0x0001;
  const unsigned short MAIL    = 0x0002;
  const unsigned short NEWS    = 0x0004;
  const unsigned short RSS     = 0x0008;

  /**
   * Determines whether or not SeaMonkey is the "Default Client" for the
   * passed in app type.
   *
   * This is simply whether or not SeaMonkey is registered to handle
   * the url schemes associated with the app.
   *
   * @param aStartupCheck true if this is the check being performed
   *                      by the first window at startup,
   *                      false otherwise.
   * @param aApps the application types being tested (Browser, Mail, News, RSS)
   */
  boolean isDefaultClient(in boolean aStartupCheck, in unsigned short aApps);

  /**
   * Registers SeaMonkey as the "Default Client" for the
   * passed in app types.
   *
   * @param aForAllUsers   Whether or not SeaMonkey should attempt
   *                       to become the default client for all
   *                       users on a multi-user system.
   * @param aClaimAllTypes Register SeaMonkey as the handler for
   *                       additional protocols (ftp, chrome etc)
   *                       and web documents (.html, .xhtml etc).
   * @param aApps the application types being tested (Mail, News, Browser, RSS)
   */
  void setDefaultClient(in boolean aForAllUsers, in boolean aClaimAllTypes, in unsigned short aApps);

  /**
   * Used to determine whether or not to show a "Set Default Client"
   * query dialog. This attribute is true if the application is starting
   * up and "shell.checkDefaultClient" is true, otherwise it
   * is false.
   */
  attribute boolean shouldCheckDefaultClient;


  /**
   * Returns the appTypes constants we should be the default client for.
   * Saves/reads the default apps to/from the pref shell.checkDefaultApps
   */
  attribute unsigned short shouldBeDefaultClientFor;

  /**
   * Sets the desktop background image using either the HTML <IMG>
   * element supplied or the background image of the element supplied.
   *
   * @param aImageElement Either a HTML <IMG> element or an element with
   *                      a background image from which to source the
   *                      background image.
   * @param aPosition     How to place the image on the desktop
   */

  void setDesktopBackground(in nsIDOMElement aElement, in long aPosition);

  /**
   * Flags for positioning/sizing of the Desktop Background image.
   */
  const long BACKGROUND_TILE      = 1;
  const long BACKGROUND_STRETCH   = 2;
  const long BACKGROUND_CENTER    = 3;

  /**
   * The desktop background color, visible when no background image is
   * used, or if the background image is centered and does not fill the
   * entire screen. An RGB value (r << 16 | g << 8 | b)
   */
  attribute unsigned long desktopBackgroundColor;

  /**
   * Opens an application with a specific URI to load.
   * @param   application
   *          The application file (or bundle directory, on OS X)
   * @param   uri
   *          The uri to be loaded by the application
   */
  void openApplicationWithURI(in nsILocalFile aApplication, in ACString aURI);

  /**
   * The default system handler for web feeds
   */
  readonly attribute nsILocalFile defaultFeedReader;
};

