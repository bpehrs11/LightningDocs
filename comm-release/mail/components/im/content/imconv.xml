<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Instantbird messenging client, released
   - 2007.
   -
   - The Initial Developer of the Original Code is
   - Florian QUEZE <florian@instantbird.org>.
   - Portions created by the Initial Developer are Copyright (C) 2007
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings [
  <!ENTITY % chatDTD SYSTEM "chrome://messenger/locale/chat.dtd" >
  %chatDTD;
]>

<bindings id="convBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml">

  <binding id="conv" extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">
    <content>
      <xul:stack class="prplBuddyIcon" mousethrough="always">
        <xul:image class="protoIcon" xbl:inherits="src=iconPrpl,status"/>
        <xul:image class="statusIcon" xbl:inherits="status"/>
      </xul:stack>
      <xul:hbox flex="1" class="conv-hbox" mousethrough="always">
        <xul:label crop="end" flex="1" mousethrough="always"
                   anonid="displayname" class="convDisplayName blistDisplayName"
                   xbl:inherits="value=displayname,status"/>
        <xul:label anonid="unreadCount" class="convUnreadCount"
                   crop="end" mousethrough="never" flex="1000000"
                   xbl:inherits="value=unreadCount"/>
        <xul:button anonid="closeConversationButton" class="closeConversationButton"
                    tooltiptext="&closeConversationButton.tooltip;"/>
      </xul:hbox>
    </content>
    <implementation implements="nsIObserver">

     <destructor>
      <![CDATA[
        if (this.conv) {
          this.conv.removeObserver(this);
          delete this.conv;
        }
      ]]>
     </destructor>

     <field name="convView">null</field>
     <method name="build">
      <parameter name="aConv"/>
      <body>
      <![CDATA[
        this.conv = aConv;
        this.conv.addObserver(this);
        this.update();
      ]]>
      </body>
     </method>

     <property name="displayName"
               onget="return this.conv.title;"/>

     <!-- for compatibility with the  imgroup sortComparator -->
     <property name="contact"
               onget="return this.conv;"/>

     <!-- nsIObserver implementation -->
     <method name="observe">
       <parameter name="aSubject"/>
       <parameter name="aTopic"/>
       <parameter name="aData"/>
       <body>
       <![CDATA[
         if (aTopic == "target-purple-conversation-changed" ||
             aTopic == "unread-message-count-changed" ||
             aTopic == "update-conv-title" ||
             aTopic == "update-buddy-status" ||
             aTopic == "update-buddy-status" ||
             aTopic == "update-conv-chatleft" ||
             aTopic == "chat-update-topic")
           this.update();
         if (aTopic == "update-conv-title")
           this.group.updateContactPosition(aSubject);
       ]]>
       </body>
     </method>

     <property name="selected">
       <getter><![CDATA[
           if (!gChatTab)
             document.getElementById("tabmail").openTab("chat", {background: true});
           return gChatTab.tabNode.selected && this.getAttribute("selected") == "true";
         ]]></getter>
       <setter><![CDATA[
         if (val)
           this.setAttribute("selected", "true");
         else
           this.removeAttribute("selected");

         return val;
         ]]></setter>
     </property>

     <method name="update">
      <body>
      <![CDATA[
        this.setAttribute("displayname", this.displayName);
        if (this.selected) {
          if (this.convView && this.convView.loaded) {
            this.conv.markAsRead();
            chatHandler.updateTitle();
          }
          this.setAttribute("unreadCount", "");
          this.removeAttribute("unread");
          this.removeAttribute("attention");
        }
        else {
          let unreadCount = this.conv.unreadIncomingMessageCount;
          if (!unreadCount)
            unreadCount = "";
          else {
            this.setAttribute("unread", "true");
            if (this.conv.isChat) {
              let directedMessages = this.conv.unreadTargetedMessageCount;
              if (directedMessages)
                this.setAttribute("attention", "true");
              unreadCount = directedMessages + "/" + unreadCount;
            }
            unreadCount = "(" + unreadCount + ")";
          }
          this.setAttribute("unreadCount", unreadCount);
          chatHandler.updateTitle();
        }

        if (this.conv.isChat) {
          if (!this.conv.account.connected || this.conv.left)
            this.setAttribute("status", "left");
          else
            this.removeAttribute("status");
        }
        else {
          let statusType = Ci.imIStatusInfo.STATUS_UNKNOWN;
          let buddy = this.conv.buddy;
          if (buddy && buddy.account.connected)
            statusType = buddy.statusType;
          if (!("Status" in window))
            Components.utils.import("resource:///modules/imStatusUtils.jsm");
          this.setAttribute("status", Status.toAttribute(statusType));
        }

        this.setAttribute("iconPrpl",
                          this.conv.account.protocol.iconBaseURI + "icon.png");
      ]]>
      </body>
     </method>

     <method name="destroy">
      <body>
      <![CDATA[
        if (this.conv)
          this.conv.removeObserver(this);
        if (this.convView) {
          this.convView.destroy();
          this.convView.parentNode.removeChild(this.convView);
        }
        let list = this.parentNode;
        if (list.selectedItem == this)
          list.selectedItem = this.previousSibling;
        list.removeChild(this);
        delete this.conv;
      ]]>
      </body>
     </method>

     <method name="closeConversation">
      <body>
       <![CDATA[
         if (this.conv)
           this.conv.close();
         else
           this.destroy();
       ]]>
      </body>
     </method>

     <method name="keyPress">
      <parameter name="aEvent"/>
      <body></body>
     </method>
    </implementation>
    <handlers>
     <handler event="mousedown">
       <![CDATA[
         let anonid = event.originalTarget.getAttribute("anonid");
         if (anonid == "closeConversationButton") {
           closeConversation();
           event.preventDefault();
         }
       ]]>
     </handler>
    </handlers>
  </binding>
</bindings>
