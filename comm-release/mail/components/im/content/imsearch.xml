<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
  - Version: MPL 1.1/GPL 2.0/LGPL 2.1
  -
  - The contents of this file are subject to the Mozilla Public License Version
  - 1.1 (the "License"); you may not use this file except in compliance with
  - the License. You may obtain a copy of the License at
  - http://www.mozilla.org/MPL/
  -
  - Software distributed under the License is distributed on an "AS IS" basis,
  - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  - for the specific language governing rights and limitations under the
  - License.
  -
  - The Original Code is Mozilla Communicator client code, released
  - March 31, 1998.
  -
  - The Initial Developer of the Original Code is
  - Netscape Communications Corporation.
  - Portions created by the Initial Developer are Copyright (C) 1998-1999
  - the Initial Developer. All Rights Reserved.
  -
  - Contributor(s):
  -   Scott MacGregor <mscott@mozilla.org>
  -   Andrew Sutherland <asutherland@asutherland.org>
  -   David Ascher <dascher@mozillamessaging.com>
  -   Thomas DÃ¼llmann <bugzilla2009@duellmann24.net>
  -
  - Alternatively, the contents of this file may be used under the terms of
  - either of the GNU General Public License Version 2 or later (the "GPL"),
  - or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  - in which case the provisions of the GPL or the LGPL are applicable instead
  - of those above. If you wish to allow use of your version of this file only
  - under the terms of either the GPL or the LGPL, and not to allow others to
  - use your version of this file under the terms of the MPL, indicate your
  - decision by deleting the provisions above and replace them with the notice
  - and other provisions required by the GPL or the LGPL. If you do not delete
  - the provisions above, a recipient may use your version of this file under
  - the terms of any one of the MPL, the GPL or the LGPL.
  - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings [
<!ENTITY % messengerDTD SYSTEM "chrome://messenger/locale/messenger.dtd">
%messengerDTD;
]>

<bindings id="SearchBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:html="http://www.w3.org/1999/xhtml"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl">

  <!--
    - The glodaSearch binding implements a gloda-backed search mechanism.  The
    -  actual search logic comes from the glodaFacet tab mode in the
    -  glodaFacetTabType definition.  This binding serves as a means to display
    -  and alter the current search query if a "glodaFacet" tab is displayed,
    -  or enter a search query and spawn a new "glodaFacet" tab if one is
    -  currently not displayed.
    -
    - This widget used to have many weird implementation nuances.  Now we are
    -  just a little bit of extra stuff on top of the toolkit autocomplete
    -  implementation.  Our deviations are:
    -  - We collapse ourselves when gloda is disabled; we track the state.
    -  -
    -->
  <binding id="IMGlodaSearch"
           extends="chrome://global/content/bindings/autocomplete.xml#autocomplete">
    <resources>
      <stylesheet src="chrome://messenger/skin/searchBox.css"/>
    </resources>

    <handlers>
      <handler event="drop" phase="capturing"><![CDATA[
        nsDragAndDrop.drop(event, this.searchInputDNDObserver);
      ]]></handler>

      <handler event="keypress" keycode="VK_RETURN"><![CDATA[
        this.doSearch();
        event.preventDefault();
        event.stopPropagation();
      ]]></handler>
      <handler event="keypress" keycode="VK_ESCAPE"><![CDATA[
        this.clearSearch();
        event.preventDefault();
        event.stopPropagation();
      ]]></handler>
    </handlers>

    <implementation implements="nsIObserver">
      <constructor><![CDATA[
        const Cc = Components.classes;
        const Ci = Components.interfaces;
        const Cu = Components.utils;
        Cu.import("resource:///modules/errUtils.js");
        try {
          this.setAttribute(
            "placeholder",
            this.getAttribute("emptytextbase")
                 .replace("#1", this.getAttribute(
                                  Application.platformIsMac ?
                                  "keyLabelMac" : "keyLabelNonMac")));

          var prefBranch =
              Components.classes['@mozilla.org/preferences-service;1'].
              getService(Components.interfaces.nsIPrefBranch2);

          if (typeof gSearchInputObserversRegistered != "undefined") {
            // due to a bug in XBL that means that destructors don't get
            // called reliably, the customize toolbar path will end up creating
            // two clones of this widget, and never destroy them.  So the destructor
            // isn't reliably called, and so we must use a global to avoid
            // registering ourselves for the same event multiple times (twice
            // per invocation of the customize-toolbar).

            // We need to test for undefined above because if the widget is
            // created from the customize toolbar, its namespace won't include
            // a definition of gSearchInputObserversRegistered -- and we don't
            // care, since we don't want to register observers in that scope.

            prefBranch.addObserver("mailnews.database.global.indexer.enabled",
                                   this._prefObserver, false);
          }

          this.glodaEnabled =
            prefBranch.getBoolPref("mailnews.database.global.indexer.enabled");
          this.collapsed = !this.glodaEnabled;

          // make sure we set our emptytext here from the get-go
        if (this.hasAttribute("placeholder"))
          this.placeholder = this.getAttribute("placeholder");
        } catch (e) {
          logException(e, true);
        }
      ]]></constructor>

      <destructor>
        <![CDATA[
          var prefBranch =
              Components.classes['@mozilla.org/preferences-service;1'].
              getService(Components.interfaces.nsIPrefBranch);
          prefBranch.removeObserver("mailnews.database.global.indexer.enabled",
                                    this._prefObserver);
        ]]>
      </destructor>

      <field name="_prefObserver">({
        inputSearch: this,
        observe: function(subject, topic, data)
        {
          if (topic == "nsPref:changed") {
            subject.QueryInterface(Components.interfaces.nsIPrefBranch);
            switch (data) {
            case "mailnews.database.global.indexer.enabled":
              this.inputSearch.glodaEnabled =
                gPrefBranch.getBoolPref(
                  "mailnews.database.global.indexer.enabled");
              this.inputSearch.collapsed = !this.inputSearch.glodaEnabled;
              break;
            }
          }
        },

        QueryInterface: function(aIID)
        {
          if (aIID.equals(Components.interfaces.nsIObserver) ||
              aIID.equals(Components.interfaces.nsISupports))
            return this;
          throw Components.results.NS_NOINTERFACE;
        }
        });
      </field>
      <property name="menupopup" readonly="true">
        <getter><![CDATA[
          return document.getAnonymousElementByAttribute(
                   this, 'anonid', 'quick-search-menupopup');
        ]]></getter>
      </property>

      <property name="state">
        <getter><![CDATA[
          return {
            'string': this.value
          };
        ]]></getter>
        <setter><![CDATA[
          this.value = val['string'];
        ]]></setter>
      </property>

      // DND Observer
      <field name="searchInputDNDObserver" readonly="true"><![CDATA[
      ({
        inputSearch: this,

        onDrop: function (aEvent, aXferData, aDragSession) {
          try {
            if (aXferData.data) {
              this.inputSearch.focus();
              this.inputSearch.value = aXferData.data;
              // XXX for some reason the input field is _cleared_ even though
              // the search works.
              this.inputSearch.doSearch();
            }
          } catch (e) {
            logException(e);
          }
        },

        getSupportedFlavours: function () {
          var flavourSet = new FlavourSet();
          flavourSet.appendFlavour("text/unicode");
          return flavourSet;
        }
      })
      ]]></field>

      <method name="doSearch">
        <body><![CDATA[
          try {
            if (this.value) {
              let tabmail = document.getElementById("tabmail");
              // If the current tab is a gloda search tab, reset the value
              //  to the initial search value.  Otherwise, clear it.  This
              //  is the value that 3is going to be saved with the current
              //  tab when we switch back to it next.
              let searchString = this.value;

              if (tabmail.currentTabInfo.mode.name == "glodaFacet") {
                // we'd rather reuse the existing tab (and somehow do something
                // smart with any preexisting facet choices, but that's a
                // bit hard right now, so doing the cheap thing and closing
                // this tab and starting over
                tabmail.closeTab();
              }
              this.value = ''; // clear our value, to avoid persistence
              if (!("GlodaIMSearcher" in window))
                Cu.import("resource:///modules/search_im.js");
              tabmail.openTab("glodaFacet", {
                searcher: new GlodaIMSearcher(null, searchString)
              });
            }
          } catch (e) {
            logException(e);
          }
        ]]>
        </body>
      </method>
      <method name="clearSearch">
        <body><![CDATA[
          this.value = "";
        ]]></body>
      </method>
    </implementation>
  </binding>

</bindings>
