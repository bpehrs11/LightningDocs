/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Sun Microsystems code.
 *
 * The Initial Developer of the Original Code is
 *   Sun Microsystems, Inc.
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Daniel Boelzle <daniel.boelzle@sun.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
interface calIItemBase;
interface calIAttendee;

/**
 * Accesses scheduling specific information of calendar items.
 * Implementation by providers is optional.
 */
[scriptable, uuid(9221e243-c97e-4c5f-9e00-5d7d3521bb44)]
interface calISchedulingSupport : nsISupports
{
    /**
     * Tests whether the passed item corresponds to an invitation, e.g.
     * the CUA or server has placed it in the calendar.
     *
     * @param aItem     Item to be tested.
     * @return          Whether the passed item corresponds to an invitation.
     */
    boolean isInvitation(in calIItemBase aItem);

    /**
     * Gets the invited attendee if the passed item corresponds to
     * an invitation. UI code will use that attendee to modify e.g. PARTSTAT.
     * If isInvitation returns true, getInvitedAttendee must return
     * an attendee. If isInvitation is false, getInvitedAttendee may return
     * an attendee in case the organizer (and owner of the calendar) has
     * invited himself.
     *
     * @param aItem     Invitation item.
     * @return          Attendee object, or null.
     */
    calIAttendee getInvitedAttendee(in calIItemBase aItem);

    /**
     * Checks whether the provider keeps track of sending out the proper
     * iTIP/iMIP message for a particular item.
     *
     * @param aMethod a iTIP method
     * @param aItem an item that has been modified/deleted etc.
     * @return true, if the provider keeps track of sending out passed message
     */
    boolean canNotify(in AUTF8String aMethod, in calIItemBase aItem);
};
