/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Sun Microsystems code.
 *
 * The Initial Developer of the Original Code is Oracle Corporation
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Berend Cornelius <berend.cornelius@sun.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
interface calICalendar;
interface nsIDOMChromeWindow;

[scriptable, uuid(60160f68-4514-41b4-a19d-2f2cf0143426)]
interface calIStatusObserver : nsISupports
{

 void initialize(in nsIDOMChromeWindow aWindow);

 /**
  * Starts the display of an operation to check a series of calendars
  * This operation may either be determined or undetermined
  * @param aProgressMode    An integer value that can accept DETERMINED_PROGRESS,
  *                           UNDETERMINED_PROGRESS or NO_PROGRESS
  * @param aCalendarsCount  If the first parameter is DETERMINED_PROGRESS
  *                           aCalendarCount is the number of Calendars
  *                           which completion is to be displayed
  */
  void startMeteors(in unsigned long aProgressMode, in unsigned long aCalendarCount);

  /**
  * stops the display of an progressed operation
  */
  void stopMeteors();

  /**
   * increments the display value denoting that a calendar has been processed
   */
  void calendarCompleted(in calICalendar aCalendar);

  /**
   * @return    An integer value denoting wheter a progress is running or not;
   *              if it returns DETERMINED_PROGRESS a determined progress 
                  is running;
   *              if it returns UNDETERMINED_PROGRESS an undetermined progress 
                  is running;
   *              if it returns NO_PROGRESS no Progress is running.
   */
  readonly attribute unsigned long spinning;

  /**
   * A constant that denotes that no operation is running
   */
  const unsigned long NO_PROGRESS = 0;

  /**
   * A constant that refers to whether an operation is determined
   */
  const unsigned long DETERMINED_PROGRESS = 1;

  /**
   * A constant that refers to whether an operation is undetermined
   */
  const unsigned long UNDETERMINED_PROGRESS = 2;
};
