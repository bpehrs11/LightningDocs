/* -*- Mode: idl; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla calendar code.
 *
 * The Initial Developer of the Original Code is
 *   Michiel van Leeuwen <mvl@exedo.nl>.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface calIIcalProperty;
interface calIIcalComponent;
interface calIItemBase;
interface nsIOutputStream;
interface nsIInputStream;

/**
 * An interface for serializing calendar items into an ICS string.
 * Note that this is not a service. A new instance must be created for every new
 * set of items to be serialized.
 */
[scriptable, uuid(4dcf6b4e-7322-4a61-a191-8d8cc1aea42e)]
interface calIIcsSerializer : nsISupports
{
  /**
   * Add some items to the items that are to be serialized. Can be called
   * multiple times, and appends to the set on every call.
   *
   * @param aItems
   *    The items to be added
   * @param aCount
   *    The number of items to add
   */
  void addItems([array, size_is(aCount)] in calIItemBase aItems,
                in unsigned long aCount);

  /**
   * Add a property to the top-level properties to be added on serializing. Can
   * be called multiple times, and appends to the set on every call.
   *
   * @param aProperty
   *    The property to be added
   */
  void addProperty(in calIIcalProperty aProperty);

  /**
   * Add a component to the top-level components to be added on serializing. Can
   * be called multiple times, and appends to the set on every call.
   *
   * @param aComponent
   *    The component to be added
   */
  void addComponent(in calIIcalComponent aComponent);

  /**
   * Serialize the added items, properties and components into an ICS string
   *
   * @returns
   *    A string containing the serialized items, properties and components.
   */
  AString serializeToString();

  /**
   * Serialize the added items, properties and components into an ICS stream
   *
   * @returns
   *    A stream containing the serialized items, properties and components.
   */
  nsIInputStream serializeToInputStream();

  /**
   * Serialize the added items, properties and components into an ICS stream
   *
   * @param aStream
   *    A stream into which the serialized items, properties and components
   *    will be written.
   */
  void serializeToStream(in nsIOutputStream aStream);
};
